1）为 HTTPServer 添加 0-2 秒的随机延时；
[root@docker httpserver]# cat main.go |grep -B 2 delay
	defer timer.ObserveTotal()
	user := r.URL.Query().Get("user")
	delay := randInt(10, 2000)
	time.Sleep(time.Millisecond*time.Duration(delay))
--
	}
  
2）为 HTTPServer 项目添加延时 Metric
[root@docker metrics]# cat metrics.go 
package metrics

import (
	"fmt"
	"github.com/prometheus/client_golang/prometheus"
	"time"
)

func Register() {
	err := prometheus.Register(functionLatency)
	if err != nil {
		fmt.Println(err)
	}
}

const (
	MetricNamespace = "httpserver"
)



// NewExectionTimer provides a timer for Updater's RunOnce execution
func NewTimer() *ExecutionTimer {
	return NewExectionTimer(functionLatency)
}

var (
	functionLatency = CreateExecutionTimeMetric(MetricNamespace,
		"Time spent.")

)

// NewExectionTimer provides a timer for admission latency; call ObserveXXX() on it to measure
func NewExectionTimer(histo *prometheus.HistogramVec) *ExecutionTimer {
	now := time.Now()
	return &ExecutionTimer{
		histo: histo,
		start: now,
		last: now,
	}
}

// ObserveTotal measures the execution time from the creation of the ExectionTimer
func (t *ExecutionTimer) ObserveTotal() {
	(*t.histo).WithLabelValues("total").Observe(time.Now().Sub(t.start).Seconds())
}

// CreateExecutionTimeMetric prepares a new histogram labeled with execution step
func CreateExecutionTimeMetric(namespace string, help string) *prometheus.HistogramVec {
	return prometheus.NewHistogramVec(
		prometheus.HistogramOpts{
			Namespace:	namespace,
			Name:		"execution_latency_seconds",
			Help: 		help,
			Buckets: 	prometheus.ExponentialBuckets(0.001, 2, 15),
		}, []string{"step"},
		)
}

// ExecutionTimer measures execution time of a computation, split into major steps
// usual usage pattern is: timer := NewExectionTimer(...) ; compute ; timer.ObserveStep() ; ... ; timer.ObserveTotal()
type ExecutionTimer struct {
	histo *prometheus.HistogramVec
	start time.Time
	last time.Time
}[root@docker metrics]#


[root@docker yaml]# cat httpserver-deployment.yaml 
apiVersion: apps/v1
kind: Deployment
metadata:
  name: httpserver
  namespace: m10
  labels:
    app: httpserver
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 1
  minReadySeconds: 15
  selector:
    matchLabels:
      app: httpserver
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
      labels:
        app: httpserver
    spec:
      containers:
        - name: httpserver
          image: 192.168.100.210/yiyi/httpserver:v2
          command: [/httpserver]
          envFrom:
          - configMapRef: 
              name: httpserver-env-cm
          volumeMounts:
          - name: config-volume
            mountPath: /etc/httpserver/
          resources:
            limits:
              cpu: 1000m
              memory: 1024Mi
            requests:
              cpu: 500m
              memory: 512Mi
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 5
            successThreshold: 2
      volumes:
        - name: config-volume
          configMap:
            name: httpserver-conf-cm
[root@docker yaml]# 

安装helm和grafana
